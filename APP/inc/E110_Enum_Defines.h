/*
 * E100_Enum_Defines.h
 *
 *  Created on: 2019. 8. 12.
 *      Author: jinwo
 */

#ifndef E100_ENUM_DEFINES_H_
#define E100_ENUM_DEFINES_H_


typedef enum
{
	STATE_OFF = 0u,
	STATE_ON
} E_IO_STATE ;

typedef enum
{
	MAIN_STS_INIT = 0u,
	MAIN_STS_ACC,
	MAIN_STS_EV_READY,			//BMS, LDC
	MAIN_STS_MCU_READY,
	MAIN_STS_DRIVE,
	MAIN_STS_EV_OFF,
	MAIN_STS_AVN_CHRG_CHECK,
	MAIN_STS_CHRG_STANDBY,
	MAIN_STS_CHARGE,
	MAIN_STS_POWER_OFF,
} E_MAIN_STATE;

//AVN
typedef enum
{
	RESP_NOACTIVATION = 0u,
	RESP_NOSCHEDULE,
	RESP_OUTOFSCHEDULE,
	RESP_INOFSCHEDULE
} E_AVN_RESP_CHRGSCHEDULE;

typedef enum
{
	SCHEDULECHRGCMD_NOACTIVATION = 0u,
	SCHEDULECHRGCMD_STARTSCHDULECHRG,
	SCHEDULECHRGCMD_STOPSCHEDULECHRG,
	SCHEDULECHRGCMD_CANCELSCHEDULECHRG
} E_AVN_SCHEDULECHRG_CMD;

typedef enum
{
	AVN_CHRGSTOP_NOREQ = 0u,
	AVN_CHRGSTOP_REQ,
	AVN_CHRGSTOP_INVALID
} E_AVN_CHRGSTOPCMD;

//CCU
typedef enum
{
	CCU_CHRGSTOP_NOREQ = 0u,
	CCU_CHRGSTOP_REQ,
	CCU_CHRGSTOP_INVALID
} E_CCU_CHRGSTOPREQ ;

typedef enum
{
	CCU_IMMEDIATECHRGSTART_NOREQ = 0u,
	CCU_IMMEDIATECHRGSTART_REQ,
	CCU_IMMEDIATECHRGSTART_INVALID
} E_CCU_IMMEDIATECHRGSTARTREQ;

typedef enum
{
	NWREQ = 0u,
	NWRLS,
	SLEEPACK = 3u
} E_NM_SLEEP_FLAG;

typedef enum
{
	SCHEDULECHECK_NOACTIVATION = 0u,
	SCHEDULECHECK_ACTIVATION,
	SCHEDULECHECK_INVALID = 3u
} E_CHRG_SCHEDULE_CHECK;

typedef enum
{
	STEP_INIT = 0u,
	STEP_1,
	STEP_2
} E_STEP2GEARCHANGE;

/* 20190705 add EPT_DRIVE_MODE */
typedef enum
{
	MCU_STS_INIT = 0u,
	MCU_STS_STANDBY,
	MCU_STS_STARTUP,
	MCU_STS_TEARDOWN,
	MCU_STS_OPERATIONAL,
	MCU_STS_FAILURE,
	MCU_STS_CLOSEDOWN,
	MCU_STS_READY_TO_SHUTDOWN,
	MCU_STS_WAIT_FOR_SAFE_CONDITION,
} E_MCU_STATE ;

typedef enum
{
	BMS_OP_MODE_SLEEP = 0u ,
	BMS_OP_MODE_STANDBY ,
	BMS_OP_MODE_PRECHARGE ,
	BMS_OP_MODE_READY ,
	BMS_OP_MODE_ERROR ,
	BMS_OP_MODE_SHUTDOWN ,
} E_BMS_OP_MODE;

typedef enum
{
	BMS_BP_STATUS_NORMAL = 0u ,
	BMS_BP_STATUS_WARN ,
	BMS_BP_STATUS_WARN_MIL ,
	BMS_BP_STATUS_DERATING ,
	BMS_BP_STATUS_FAULT ,
	BMS_BP_STATUS_CRITICAL ,
} E_BMS_BP_STATUS;

typedef enum
{
	LDC_STS_MODE_NORMAL = 0u ,
	LDC_STS_MODE_FAULT ,
	LDC_STS_MODE_FAILURE ,
	LDC_STS_MODE_DERATING ,
} E_LDC_STS_MODE ;


typedef enum
{
	LDC_STS_READY_NOTREADY =0u,
	LDC_STS_READY_READY ,
	LDC_STS_READY_INVALID,
} E_LDC_STS_RAEDY ;


/* 20190705 modify GEAR_POSITION */
typedef enum
{
	SBWS_PARKING = 0u ,
	SBWS_REVERSE,
	SBWS_NEUTRAL,
	SBWS_DRIVE,
	SBWS_L,
	SBWS_NEUTRAL2DRIVE,
	SBWS_NEUTRAL2REVERSE,
	SBWS_NOT_READY,
	SBWS_INIT = 14u,
	SBWS_INVALID = 15u,
} E_GEAR_POSITION;				//TQ logic

typedef enum
{
	TQ_MODE_NORMAL_DRIVE = 0u,
	TQ_MODE_NORMAL_REVERSE,
	TQ_MODE_ECO_DRIVE,
	TQ_MODE_ECO_REVERSE,
	TQ_MODE_NEUTRAL,
} E_TQ_MODE ;

typedef enum
{
	ECO_MODE = 0u,
	COMPORT_MODE,
	SPORT_MODE,
	ECO_PLUS_MODE,
	DRIVE_MODE_INVALID = 15u
} E_DRIVE_MODE ;	//210113

typedef enum
{
	SW_OFF = 0u,
	SW_ON,

//	KY : 20220923 change due to compile error --> APP should be checked
//	OFF = 0u,
//	ON,

	INIT,
	INVALID
} E_REGEN_PADDLE_SW;

typedef enum
{
	NORMAL = 0u,
	ABS_ACTIVE,		//anti braking system ¹Ì²ô·¯Áü ¹æÁö
	ESP_ACTIVE,
	TCS_ACTIVE
} E_EBS_STATUS;

typedef enum
{
	P = 0u,
	N,
	IN_BETWEEN,
	INVALID_STS
} E_EGP_STATUS;

typedef enum
{
	NO_REQ = 0u,
	UNPARK,
	PARK,
	INVALID_REQ
} E_EGP_PARKINGREQ;

typedef enum
{
	RELEASE_OFF = 0u,
	RELEASE_ON,
	STUCK,
	RELEASE_INVALID
}E_PARKRELEASE_SW;

typedef enum
{
	ACC_OFF = 0u,
	CAN_SBWS
}	E_ACC_STATE;

typedef enum
{
	SUB_STS_EV_READY_INIT = 0u,
	SUB_STS_BMS_NOT_READY,
	SUB_STS_BMS_READY,
	SUB_STS_LDC_READY
}	E_EV_READY_STATE;
//typedef enum
//{
//	SBWS_PARKING = 0u ,
//	SBWS_REVERSE ,
//	SBWS_NEUTRAL ,
//	SBWS_DRIVE ,
//	SBWS_L ,
//	SBWS_INVALID = 0xfu ,
//} E_GEAR_POSITION;

typedef enum
{
	CHRG_STS_INIT = 0u,
	CHRG_STS_DC_PRECHARGE,
	CHRG_STS_DC_CHARGE,
	CHRG_STS_DC_CHARGE_STOP,
	CHRG_STS_AC_PRECHARGE,
	CHRG_STS_AC_CHARGE,
	CHRG_STS_AC_CHARGE_STOP,
	CHRG_STS_CHARG_OFF
}E_CHRG_STATE;

typedef enum
{
	STATE_A = 0u,
	STATE_B1,
	STATE_B2,
	STATE_C,
	STATE_D,
	STATE_E,
	STATE_F
} E_CP_STATE;

typedef enum
{
	UNPLUGGED = 0u,
	PLUG_IN,  	//S3_CLOSE
	S3_OPEN,
}E_PD_STATE;

typedef enum
{
	STANDBY = 0u,
	CHRG_STS_DC_CHARGEMODE,
	CHRG_STS_AC_CHARGEMODE
}E_CHARGE_MODE;

typedef enum
{
	STOP = 0u,
	SOFT_START,
	RUNNING,
	CHARGING,
	IDLE
} E_SMC_E_S;

typedef enum
{
	CHARGE_DOOR_INIT = 0u,
	CHARGE_DOOR_OPEN,
	CHARGE_DOOR_CLOSE
} E_CHRG_DOOR_STATE;

typedef enum
{
	STOP_ENERGY_FLOW = 0u,
	MOTORING,
	REGENERATIVE_BRAKING
} E_ECO_ENERGY_FLOW;

typedef enum
{
	ECO_GUIDE_LEVEL_0 = 0u,
	CHARGING_LEVEL_1,
	CHARGING_LEVEL_2,
	CHARGING_LEVEL_3,
	CHARGING_LEVEL_4,
	CHARGING_LEVEL_5,
	POWER_LEVEL_1,
	POWER_LEVEL_2,
	POWER_LEVEL_3,
	POWER_LEVEL_4,
	POWER_LEVEL_5,
	POWER_LEVEL_6,
	POWER_LEVEL_7,
	POWER_LEVEL_8,
	POWER_LEVEL_9,
	POWER_LEVEL_10,
	INVALID_LEVEL = 31u,
} E_ECO_GUIDE_Level_IND ;

typedef enum
{
	NOT_UPDATED_YET = 0u,
	UPDATED,
	UPDATE_CANCEL_PASSCNT
} E_DIAG_UPDATE_FLAG_STATUS;

typedef enum
{
	DIAG_TYPE_A = 0u,
	DIAG_TYPE_B,
	DIAG_TYPE_E,
	DIAG_TYPE_C
} E_DIAG_TYPE;

typedef enum
{
	SPD_LIM_OFF = 0u,
	SPD_LIM_READY,
	SPD_LIM_ACTIVATED
} E_SPD_LIM_STATE;

typedef enum
{
	STATE_CAN414_INIT = 0u,
	STATE_CAN414_NOREPLY,
	STATE_CAN414_REPLY
} E_CAN_414_STATE;

typedef enum
{
	CNTR_OFF = 0u,
	CNTR_ON,
	CNTR_OPEN_LOAD,
	CNTR_SHORT_TO_GND
} E_CONTACTOR_STATE;

typedef enum
{
	CHRG_IND_NOCONN_NOCHRG = 0u,
	CHRG_IND_CONN_NOCHRG,
	CHRG_IND_CONN_NOCHRG_SCHEDULECHGSET,
	CHRG_IND_DURING_CHRG,
	CHRG_IND_CHRG_COMPLETE,
	CHRG_IND_CHRG_FAIL,
	CHRG_IND_CHRGDOOROPEN,
	CHRG_IND_INVALID
} E_CHRG_STATUS_IND;

typedef enum
{
	NO_FINISH = 0u,						//ÃæÀü¿Ï·á ¾Æ´Ô
	/*NORMAL*/
	//VCU
	TARGET_SOC_CAL_REACH_NORMAL,			//1ºÎÅÍ REASON
	TARGET_SOC_AC_REACH_NORMAL,
	TARGET_SOC_DC_REACH_NORMAL,
	//ETC
	SCHEDULED_CHARGING_STOP_NORMAL,
	IMMEDIATE_CHARGE_STOP_NORMAL,
	EVCC_CHARGE_FINISH_NORMAL,
	OBC_CHARGE_FINISH_NORMAL,
	BMS_CHARGE_FINISH_NORMAL,
	TEMP_CHARGE_FINISH_NORMAL,
	REKES_CHARGE_FINISH_NORMAL,
	AVN_CHARGE_FINISH_NORMAL,
	/*ABNORMAL*/
	BMS_CHARGE_FINISH_ABNORMAL,
	EVSE_OUTVOL_ERR_FINISH_ABNORMAL,
} E_CHRG_FINISH_REASON ;

typedef enum
{
	NO_CHRG_INHIBITION = 0u,
	CHRG_INHIBIT_TEMPPROBLEM
} E_CHRG_INHIBITION_REASON;

typedef enum
{
	TIPINSTATE_LOWP = 0u,
	TIPINSTATE_MIDP,
	TIPINSTATE_HIGHP,
	TIPINSTATE_HIGH2DISABLE
} E_TIPIN_STATE;

typedef enum
{
	TIPOUTSTATE_HIGHP = 0u,
	TIPOUTSTATE_MIDP,
	TIPOUTSTATE_LOWP,
	TIPOUTSTATE_LOWFILTERP
} E_TIPOUT_STATE;

typedef enum
{
	HV_PWRLMTWRN_OFF = 0x0,
	HV_PWRLMTWRN_TRACTION_BATT_LOW,
	HV_PWRLMTWRN_CHRG_IMMEDIATELY,
	HV_PWRLMtWRN_PWR_LMT_LV1,
	HV_PWRLMTWRN_PWR_LMT_LV2
} E_VCU_HV_PWR_LMT_WRN_MSG;

typedef enum
{
	HV_PWR_INIT = 0x0,
	HV_PWR_ZONE1,
	HV_PWR_ZONE2,
	HV_PWR_ZONE3,
	HV_PWR_ZONE4,
	HV_PWR_NOPROBLEM,
} E_VCU_HV_PWR_STATE;

typedef enum
{
	VCU_EVPWRDNWRN_IND_RSOC_LOW = 0x0,
	VCU_EVPWRDNWRN_IND_EPT_DERATING,
//	VCU_EVPWRDNWRN_IND_TEMP_HIGH_BMS,
//	VCU_EVPWRDNWRN_IND_TEMP_HIGH_INVERTER,
//	VCU_EVPWRDNWRN_IND_TEMP_HIGH_MOTOR,
	VCU_EVPWRDNWRN_IND_TMPHIGH_COOLTS,
	VCU_EVPWRDNWRN_IND_TQ_LMT,
	VCU_EVPWRDNWRN_IND_DCLINK_LOW,
	VCU_EVPWRDNWRN_IND_COOLHEAT_FAULT,
	VCU_EVPWRDNWRN_IND_BMSAVPWR_LOW_2,
	VCU_EVPWRDNWRN_IND_BMSAVPWR_LOW_10,
	VCU_EVPWRDNWRN_IND_NO_PROBLEM,
} E_VCU_EVPWRDNWRN_IND_STATE;

typedef enum
{
	CHRG_CURR_SET_NOACTIVATION = 0u,
	CHRG_CURR_SET_MAX,
	CHRG_CURR_SET_REDUCE,
	CHRG_CURR_SET_MIN
} E_CHRG_CURR_SET_CMD;

typedef enum
{
	AUTOLOCK_STS_AUTO = 0u,
	AUTOLOCK_STS_LOCK
} E_AUTOLOCK_STS ;

typedef enum
{
	STPM_NO_ACTIVATION = 0u,
	STPM_ENGINE_STARTCMD = 95u,
	STPM_ENGINE_STOPCMD = 145u,
} E_STPMCMD;

typedef enum
{
	REMOTE_RESPONSE_NOACTIVAION = 0u,
	REMOTE_RESPONSE_HV_ACTIVATION_SUCCESS,
	REMOTE_RESPONSE_HV_DEACTIVATION_SUCCESS,
	REMOTE_RESPONSE_HV_ACTIVATION_FAIL,
	REMOTE_RESPONSE_HV_DEACTIVATION_FAIL,
	REMOTE_RESPONSE_HV_DEACTIVATION_VCU,
	REMOTE_RESPONSE_INVALID = 0x15,
} E_REMOTE_RESPONSE;

typedef enum
{
	SHIFT_UNMATCH_OFF = 0u,
	SHIFT_UNMATCH_SPDCOND = 1u,
	SHIFT_UNMATCH_NOBRAKE_CHANGE = 2u,
	SHIFT_UNMATCH_NOSTOP_P = 3u,
	SHIFT_UNMATCH_NOBRAKE_PRELEASE = 4u

} E_VCU_SHIFT_UNMATCH_WRN;

typedef enum
{
	SHIFTCTRLSTS_WRN_MSG_OFF = 0u,
	SHIFTCTRLSTS_WRN_MSG_P_ENGAGED = 1u,
	SHIFTCTRLSTS_WRN_MSG_N_ENGAGED = 2u,
	SHIFTCTRLSTS_WRN_MSG_P_MALFUNCTION = 3u,
	SHIFTCTRLSTS_WRN_MSG_CHECKSYSTEM = 4u
} E_VCU_SHIFTCTRLSTS_WRN_MSG;



#endif /* E100_ENUM_DEFINES_H_ */
